#include <BLEDevice.h>
#include <BLEUtils.h>
#include <BLEServer.h>
#include <BLE2902.h>

// Pin Definitions
#define GPIO_PIN_13 13
#define GPIO_PIN_23 23

// BLE Service and Characteristic UUIDs
#define SERVICE_UUID        "12345678-1234-1234-1234-1234567890ab"
#define CHARACTERISTIC_UUID "abcd1234-abcd-abcd-abcd-abcdabcdabcd"

// BLE Variables
BLECharacteristic *pCharacteristic;
bool deviceConnected = false;

// Setup GPIO pins
void setup() {
  Serial.begin(115200);

  // Initialize GPIO pins as OUTPUT
  pinMode(GPIO_PIN_13, OUTPUT);
  pinMode(GPIO_PIN_23, OUTPUT);

  // Initialize BLE
  BLEDevice::init("ESP32_Dabble_Control");
  BLEServer *pServer = BLEDevice::createServer();
  pServer->setCallbacks(new MyServerCallbacks());

  BLEService *pService = pServer->createService(SERVICE_UUID);
  
  pCharacteristic = pService->createCharacteristic(
                      CHARACTERISTIC_UUID,
                      BLECharacteristic::PROPERTY_READ |
                      BLECharacteristic::PROPERTY_WRITE
                    );
  
  pCharacteristic->setValue("0");  // Initial value
  pService->start();

  BLEAdvertising *pAdvertising = pServer->getAdvertising();
  pAdvertising->start();
  Serial.println("Waiting for a client connection...");
}

// BLE Server Callbacks
class MyServerCallbacks: public BLEServerCallbacks {
  void onConnect(BLEServer *pServer) {
    deviceConnected = true;
    Serial.println("Device connected");
  }

  void onDisconnect(BLEServer *pServer) {
    deviceConnected = false;
    Serial.println("Device disconnected");
  }
};

// Loop to check if a forward signal is received and control GPIO
void loop() {
  if (deviceConnected) {
    // Read the value from the Dabble app
    std::string value = pCharacteristic->getValue();
    
    if (value == "forward") {
      digitalWrite(GPIO_PIN_13, HIGH);  // Send signal to GPIO 13
      digitalWrite(GPIO_PIN_23, HIGH);  // Send signal to GPIO 23
      Serial.println("Forward signal received. GPIO 13 and 23 activated.");
    } else {
      digitalWrite(GPIO_PIN_13, LOW);   // Reset GPIO 13
      digitalWrite(GPIO_PIN_23, LOW);   // Reset GPIO 23
      Serial.println("No forward signal. GPIO 13 and 23 deactivated.");
    }
  }
  delay(100);  // Small delay to prevent overloading
}
